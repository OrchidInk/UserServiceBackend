// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: userinfo.sql

package db

import (
	"context"
	"time"
)

const createUserInfo = `-- name: CreateUserInfo :one
INSERT INTO
    "UserInfo" (
        "UserId",
        "LastName",
        "FirstName",
        "Email",
        "BirthDate",
        "PhoneNumber1",
        "PhoneNumber2",
        "Address1"
    )
VALUES
    (
        $1 :: INT,
        $2 :: VARCHAR(100),
        $3 :: VARCHAR(100),
        $4 :: VARCHAR(100),
        $5 :: DATE,
        $6 :: VARCHAR(12),
        $7 :: VARCHAR(12),
        $8 :: VARCHAR(150)
    ) RETURNING "UserInfoId", "UserId", "LastName", "FirstName", "Email", "BirthDate", "PhoneNumber1", "PhoneNumber2", "Address1"
`

type CreateUserInfoParams struct {
	UserId       int32
	LastName     string
	FirstName    string
	Email        string
	BirthDate    time.Time
	PhoneNumber1 string
	PhoneNumber2 string
	Address1     string
}

func (q *Queries) CreateUserInfo(ctx context.Context, arg CreateUserInfoParams) (UserInfo, error) {
	row := q.db.QueryRowContext(ctx, createUserInfo,
		arg.UserId,
		arg.LastName,
		arg.FirstName,
		arg.Email,
		arg.BirthDate,
		arg.PhoneNumber1,
		arg.PhoneNumber2,
		arg.Address1,
	)
	var i UserInfo
	err := row.Scan(
		&i.UserInfoId,
		&i.UserId,
		&i.LastName,
		&i.FirstName,
		&i.Email,
		&i.BirthDate,
		&i.PhoneNumber1,
		&i.PhoneNumber2,
		&i.Address1,
	)
	return i, err
}

const deleteUserInfo = `-- name: DeleteUserInfo :exec
DELETE FROM
    "UserInfo"
WHERE
    "UserId" = $1 :: INT
`

func (q *Queries) DeleteUserInfo(ctx context.Context, userid int32) error {
	_, err := q.db.ExecContext(ctx, deleteUserInfo, userid)
	return err
}

const findUserInfoByEmail = `-- name: FindUserInfoByEmail :one
SELECT
    "UserInfoId", "UserId", "LastName", "FirstName", "Email", "BirthDate", "PhoneNumber1", "PhoneNumber2", "Address1"
FROM
    "UserInfo"
WHERE
    "Email" = $1 :: VARCHAR(100)
LIMIT 1
`

func (q *Queries) FindUserInfoByEmail(ctx context.Context, email string) (UserInfo, error) {
	row := q.db.QueryRowContext(ctx, findUserInfoByEmail, email)
	var i UserInfo
	err := row.Scan(
		&i.UserInfoId,
		&i.UserId,
		&i.LastName,
		&i.FirstName,
		&i.Email,
		&i.BirthDate,
		&i.PhoneNumber1,
		&i.PhoneNumber2,
		&i.Address1,
	)
	return i, err
}

const findUserInfoByUserId = `-- name: FindUserInfoByUserId :one
SELECT
    "UserInfoId", "UserId", "LastName", "FirstName", "Email", "BirthDate", "PhoneNumber1", "PhoneNumber2", "Address1"
FROM
    "UserInfo"
WHERE
    "UserId" = $1 :: INT
LIMIT 1
`

func (q *Queries) FindUserInfoByUserId(ctx context.Context, userid int32) (UserInfo, error) {
	row := q.db.QueryRowContext(ctx, findUserInfoByUserId, userid)
	var i UserInfo
	err := row.Scan(
		&i.UserInfoId,
		&i.UserId,
		&i.LastName,
		&i.FirstName,
		&i.Email,
		&i.BirthDate,
		&i.PhoneNumber1,
		&i.PhoneNumber2,
		&i.Address1,
	)
	return i, err
}

const updateUserInfo = `-- name: UpdateUserInfo :exec
UPDATE
    "UserInfo"
SET
    "LastName" = $1 :: VARCHAR(100),
    "FirstName" = $2 :: VARCHAR(100),
    "Email" = $3 :: VARCHAR(100),
    "BirthDate" = $4 :: DATE,
    "PhoneNumber1" = $5 :: VARCHAR(12),
    "PhoneNumber2" = $6 :: VARCHAR(12),
    "Address1" = $7 :: VARCHAR(150)
WHERE
    "UserId" = $8 :: INT
`

type UpdateUserInfoParams struct {
	LastName     string
	FirstName    string
	Email        string
	BirthDate    time.Time
	PhoneNumber1 string
	PhoneNumber2 string
	Address1     string
	UserId       int32
}

func (q *Queries) UpdateUserInfo(ctx context.Context, arg UpdateUserInfoParams) error {
	_, err := q.db.ExecContext(ctx, updateUserInfo,
		arg.LastName,
		arg.FirstName,
		arg.Email,
		arg.BirthDate,
		arg.PhoneNumber1,
		arg.PhoneNumber2,
		arg.Address1,
		arg.UserId,
	)
	return err
}
