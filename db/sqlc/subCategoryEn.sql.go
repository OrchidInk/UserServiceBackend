// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: subCategoryEn.sql

package db

import (
	"context"
)

const createSubCategoryEn = `-- name: CreateSubCategoryEn :one
INSERT INTO
    "subCategoryEn" (
        "subCategoryNameEn",
        -- Correct casing here
        "CategoryEnID"
    )
VALUES
    (
        $1 :: VARCHAR(100),
        $2 :: INT
    ) RETURNING "subCategoryIDEn", "subCategoryNameEn", "CategoryEnID"
`

type CreateSubCategoryEnParams struct {
	SubCategoryNameEn string
	CategoryEnID      int32
}

func (q *Queries) CreateSubCategoryEn(ctx context.Context, arg CreateSubCategoryEnParams) (SubCategoryEn, error) {
	row := q.db.QueryRowContext(ctx, createSubCategoryEn, arg.SubCategoryNameEn, arg.CategoryEnID)
	var i SubCategoryEn
	err := row.Scan(&i.SubCategoryIDEn, &i.SubCategoryNameEn, &i.CategoryEnID)
	return i, err
}

const deleteSubCategoryEn = `-- name: DeleteSubCategoryEn :exec
DELETE FROM
    "subCategoryEn"
WHERE
    "subCategoryIDEn" = $1
`

func (q *Queries) DeleteSubCategoryEn(ctx context.Context, subcategoryiden int32) error {
	_, err := q.db.ExecContext(ctx, deleteSubCategoryEn, subcategoryiden)
	return err
}

const findByNameSubCategoryEn = `-- name: FindByNameSubCategoryEn :one
SELECT
    "subCategoryIDEn", "subCategoryNameEn", "CategoryEnID"
FROM
    "subCategoryEn"
WHERE
    "subCategoryNameEn" = $1
LIMIT
    1
`

func (q *Queries) FindByNameSubCategoryEn(ctx context.Context, subcategorynameen string) (SubCategoryEn, error) {
	row := q.db.QueryRowContext(ctx, findByNameSubCategoryEn, subcategorynameen)
	var i SubCategoryEn
	err := row.Scan(&i.SubCategoryIDEn, &i.SubCategoryNameEn, &i.CategoryEnID)
	return i, err
}

const findBySubCategoryIDEn = `-- name: FindBySubCategoryIDEn :one
SELECT
    "subCategoryIDEn", "subCategoryNameEn", "CategoryEnID"
FROM
    "subCategoryEn"
WHERE
    "subCategoryIDEn" = $1
LIMIT
    1
`

func (q *Queries) FindBySubCategoryIDEn(ctx context.Context, subcategoryiden int32) (SubCategoryEn, error) {
	row := q.db.QueryRowContext(ctx, findBySubCategoryIDEn, subcategoryiden)
	var i SubCategoryEn
	err := row.Scan(&i.SubCategoryIDEn, &i.SubCategoryNameEn, &i.CategoryEnID)
	return i, err
}

const getListAllSubCategoriesEn = `-- name: GetListAllSubCategoriesEn :many
SELECT
    "subCategoryIDEn", "subCategoryNameEn", "CategoryEnID"
FROM
    "subCategoryEn"
`

func (q *Queries) GetListAllSubCategoriesEn(ctx context.Context) ([]SubCategoryEn, error) {
	rows, err := q.db.QueryContext(ctx, getListAllSubCategoriesEn)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubCategoryEn
	for rows.Next() {
		var i SubCategoryEn
		if err := rows.Scan(&i.SubCategoryIDEn, &i.SubCategoryNameEn, &i.CategoryEnID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsBySubCategoryEn = `-- name: GetProductsBySubCategoryEn :many
SELECT
    p."ProductEnID",
    p."ProductNameEn",
    p."PriceEn",
    p."StockQuantity",
    p."ImagesPathEn"
FROM
    "subCategoryEn" sc
    JOIN "productEn" p ON sc."subCategoryIDEn" = p."subCategoryIDEn"
WHERE
    sc."subCategoryIDEn" = $1
`

type GetProductsBySubCategoryEnRow struct {
	ProductEnID   int32
	ProductNameEn string
	PriceEn       string
	StockQuantity int32
	ImagesPathEn  string
}

func (q *Queries) GetProductsBySubCategoryEn(ctx context.Context, subcategoryiden int32) ([]GetProductsBySubCategoryEnRow, error) {
	rows, err := q.db.QueryContext(ctx, getProductsBySubCategoryEn, subcategoryiden)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsBySubCategoryEnRow
	for rows.Next() {
		var i GetProductsBySubCategoryEnRow
		if err := rows.Scan(
			&i.ProductEnID,
			&i.ProductNameEn,
			&i.PriceEn,
			&i.StockQuantity,
			&i.ImagesPathEn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubCategoryByIDEn = `-- name: UpdateSubCategoryByIDEn :one
UPDATE
    "subCategoryEn"
SET
    "subCategoryNameEn" = $1,
    "CategoryEnID" = $2
WHERE
    "subCategoryIDEn" = $3 RETURNING "subCategoryIDEn", "subCategoryNameEn", "CategoryEnID"
`

type UpdateSubCategoryByIDEnParams struct {
	SubCategoryNameEn string
	CategoryEnID      int32
	SubCategoryIDEn   int32
}

func (q *Queries) UpdateSubCategoryByIDEn(ctx context.Context, arg UpdateSubCategoryByIDEnParams) (SubCategoryEn, error) {
	row := q.db.QueryRowContext(ctx, updateSubCategoryByIDEn, arg.SubCategoryNameEn, arg.CategoryEnID, arg.SubCategoryIDEn)
	var i SubCategoryEn
	err := row.Scan(&i.SubCategoryIDEn, &i.SubCategoryNameEn, &i.CategoryEnID)
	return i, err
}

const updateSubCategoryNameEn = `-- name: UpdateSubCategoryNameEn :one
UPDATE
    "subCategoryEn"
SET
    "subCategoryNameEn" = $1 :: VARCHAR(100)
WHERE
    "subCategoryIDEn" = $2 RETURNING "subCategoryIDEn", "subCategoryNameEn", "CategoryEnID"
`

type UpdateSubCategoryNameEnParams struct {
	SubCategoryNameEn string
	SubCategoryIDEn   int32
}

func (q *Queries) UpdateSubCategoryNameEn(ctx context.Context, arg UpdateSubCategoryNameEnParams) (SubCategoryEn, error) {
	row := q.db.QueryRowContext(ctx, updateSubCategoryNameEn, arg.SubCategoryNameEn, arg.SubCategoryIDEn)
	var i SubCategoryEn
	err := row.Scan(&i.SubCategoryIDEn, &i.SubCategoryNameEn, &i.CategoryEnID)
	return i, err
}
