// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
	"time"
)

const countListUser = `-- name: CountListUser :many
SELECT
    count(*)
FROM
    "User"
WHERE
    "IsUser" = TRUE
`

func (q *Queries) CountListUser(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, countListUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var count int64
		if err := rows.Scan(&count); err != nil {
			return nil, err
		}
		items = append(items, count)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createUser = `-- name: CreateUser :one
INSERT INTO
    "User" (
        "LastName",
        "FirstName",
        "UserName",
        "Email",
        "IsHashedPassword",
        "IsAdmin",
        "IsUser",
        "IsSuperAdmin",
        "IsActive"
    )
VALUES
    (
        $1 :: VARCHAR(100),
        $2 :: VARCHAR(100),
        $3 :: VARCHAR(100),
        $4 :: VARCHAR(100),
        $5 :: TEXT,
        $6 :: BOOLEAN,
        $7 :: BOOLEAN,
        $8 :: BOOLEAN,
        $9 :: BOOLEAN
    ) RETURNING "ID", "LastName", "FirstName", "UserName", "Email", "IsHashedPassword", "IsAdmin", "IsUser", "IsSuperAdmin", "IsActive", "Created_At"
`

type CreateUserParams struct {
	LastName         string
	FirstName        string
	UserName         string
	Email            string
	IsHashedPassword string
	IsAdmin          bool
	IsUser           bool
	IsSuperAdmin     bool
	IsActive         bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.LastName,
		arg.FirstName,
		arg.UserName,
		arg.Email,
		arg.IsHashedPassword,
		arg.IsAdmin,
		arg.IsUser,
		arg.IsSuperAdmin,
		arg.IsActive,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LastName,
		&i.FirstName,
		&i.UserName,
		&i.Email,
		&i.IsHashedPassword,
		&i.IsAdmin,
		&i.IsUser,
		&i.IsSuperAdmin,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const findByAdminId = `-- name: FindByAdminId :one
SELECT
    "ID", "LastName", "FirstName", "UserName", "Email", "IsHashedPassword", "IsAdmin", "IsUser", "IsSuperAdmin", "IsActive", "Created_At"
FROM
    "User"
WHERE
    "ID" = $1
    AND "IsAdmin" = TRUE
`

func (q *Queries) FindByAdminId(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, findByAdminId, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LastName,
		&i.FirstName,
		&i.UserName,
		&i.Email,
		&i.IsHashedPassword,
		&i.IsAdmin,
		&i.IsUser,
		&i.IsSuperAdmin,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const findBySuperAdminAdmin = `-- name: FindBySuperAdminAdmin :many
SELECT
    "ID", "LastName", "FirstName", "UserName", "Email", "IsHashedPassword", "IsAdmin", "IsUser", "IsSuperAdmin", "IsActive", "Created_At"
FROM
    "User"
WHERE
    "IsSuperAdmin" = TRUE
`

func (q *Queries) FindBySuperAdminAdmin(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, findBySuperAdminAdmin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.LastName,
			&i.FirstName,
			&i.UserName,
			&i.Email,
			&i.IsHashedPassword,
			&i.IsAdmin,
			&i.IsUser,
			&i.IsSuperAdmin,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findByUser = `-- name: FindByUser :one
SELECT
    "ID", "LastName", "FirstName", "UserName", "Email", "IsHashedPassword", "IsAdmin", "IsUser", "IsSuperAdmin", "IsActive", "Created_At"
FROM
    "User"
WHERE
    "UserName" = $1 :: VARCHAR(100)
LIMIT 1
`

func (q *Queries) FindByUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, findByUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LastName,
		&i.FirstName,
		&i.UserName,
		&i.Email,
		&i.IsHashedPassword,
		&i.IsAdmin,
		&i.IsUser,
		&i.IsSuperAdmin,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const findByUserID = `-- name: FindByUserID :one
SELECT
    "ID", "LastName", "FirstName", "UserName", "Email", "IsHashedPassword", "IsAdmin", "IsUser", "IsSuperAdmin", "IsActive", "Created_At",
    "IsAdmin",
    "IsUser",
    "IsSuperAdmin"
FROM
    "User"
WHERE 
    "ID" = $1
LIMIT 1
`

type FindByUserIDRow struct {
	ID               int32
	LastName         string
	FirstName        string
	UserName         string
	Email            string
	IsHashedPassword string
	IsAdmin          bool
	IsUser           bool
	IsSuperAdmin     bool
	IsActive         bool
	CreatedAt        time.Time
	IsAdmin_2        bool
	IsUser_2         bool
	IsSuperAdmin_2   bool
}

func (q *Queries) FindByUserID(ctx context.Context, id int32) (FindByUserIDRow, error) {
	row := q.db.QueryRowContext(ctx, findByUserID, id)
	var i FindByUserIDRow
	err := row.Scan(
		&i.ID,
		&i.LastName,
		&i.FirstName,
		&i.UserName,
		&i.Email,
		&i.IsHashedPassword,
		&i.IsAdmin,
		&i.IsUser,
		&i.IsSuperAdmin,
		&i.IsActive,
		&i.CreatedAt,
		&i.IsAdmin_2,
		&i.IsUser_2,
		&i.IsSuperAdmin_2,
	)
	return i, err
}

const findByUserName = `-- name: FindByUserName :one
SELECT
    "ID", "LastName", "FirstName", "UserName", "Email", "IsHashedPassword", "IsAdmin", "IsUser", "IsSuperAdmin", "IsActive", "Created_At",
    "IsAdmin",
    "IsSuperAdmin",
    "IsUser"
FROM
    "User"
WHERE
    "UserName" = $1 :: VARCHAR(100)
LIMIT 1
`

type FindByUserNameRow struct {
	ID               int32
	LastName         string
	FirstName        string
	UserName         string
	Email            string
	IsHashedPassword string
	IsAdmin          bool
	IsUser           bool
	IsSuperAdmin     bool
	IsActive         bool
	CreatedAt        time.Time
	IsAdmin_2        bool
	IsSuperAdmin_2   bool
	IsUser_2         bool
}

func (q *Queries) FindByUserName(ctx context.Context, username string) (FindByUserNameRow, error) {
	row := q.db.QueryRowContext(ctx, findByUserName, username)
	var i FindByUserNameRow
	err := row.Scan(
		&i.ID,
		&i.LastName,
		&i.FirstName,
		&i.UserName,
		&i.Email,
		&i.IsHashedPassword,
		&i.IsAdmin,
		&i.IsUser,
		&i.IsSuperAdmin,
		&i.IsActive,
		&i.CreatedAt,
		&i.IsAdmin_2,
		&i.IsSuperAdmin_2,
		&i.IsUser_2,
	)
	return i, err
}

const getListAdmin = `-- name: GetListAdmin :many
SELECT
    "ID", "LastName", "FirstName", "UserName", "Email", "IsHashedPassword", "IsAdmin", "IsUser", "IsSuperAdmin", "IsActive", "Created_At"
FROM
    "User"
WHERE
    "IsAdmin" = TRUE
`

func (q *Queries) GetListAdmin(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getListAdmin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.LastName,
			&i.FirstName,
			&i.UserName,
			&i.Email,
			&i.IsHashedPassword,
			&i.IsAdmin,
			&i.IsUser,
			&i.IsSuperAdmin,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListUser = `-- name: GetListUser :many
SELECT  
    "ID", "LastName", "FirstName", "UserName", "Email", "IsHashedPassword", "IsAdmin", "IsUser", "IsSuperAdmin", "IsActive", "Created_At"
FROM
    "User"
WHERE
    "IsUser" = TRUE
`

func (q *Queries) GetListUser(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getListUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.LastName,
			&i.FirstName,
			&i.UserName,
			&i.Email,
			&i.IsHashedPassword,
			&i.IsAdmin,
			&i.IsUser,
			&i.IsSuperAdmin,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
