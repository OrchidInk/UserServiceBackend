// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: color.sql

package db

import (
	"context"
)

const createColor = `-- name: CreateColor :one
insert into "Color" (
    "Color"
) values (
    $1
) RETURNING "ColorId", "Color"
`

func (q *Queries) CreateColor(ctx context.Context, color string) (Color, error) {
	row := q.db.QueryRowContext(ctx, createColor, color)
	var i Color
	err := row.Scan(&i.ColorId, &i.Color)
	return i, err
}

const deleteColor = `-- name: DeleteColor :exec
DELETE FROM
    "Color"
WHERE
    "ColorId" = $1
`

func (q *Queries) DeleteColor(ctx context.Context, colorid int32) error {
	_, err := q.db.ExecContext(ctx, deleteColor, colorid)
	return err
}

const getAllColor = `-- name: GetAllColor :many
SELECT
    "ColorId", "Color"
FROM
    "Color"
`

func (q *Queries) GetAllColor(ctx context.Context) ([]Color, error) {
	rows, err := q.db.QueryContext(ctx, getAllColor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Color
	for rows.Next() {
		var i Color
		if err := rows.Scan(&i.ColorId, &i.Color); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateColor = `-- name: UpdateColor :one
update 
    "Color"
SET
    "Color" = $1
WHERE
    "ColorId" = $2 RETURNING "ColorId", "Color"
`

type UpdateColorParams struct {
	Color   string
	ColorId int32
}

func (q *Queries) UpdateColor(ctx context.Context, arg UpdateColorParams) (Color, error) {
	row := q.db.QueryRowContext(ctx, updateColor, arg.Color, arg.ColorId)
	var i Color
	err := row.Scan(&i.ColorId, &i.Color)
	return i, err
}
