// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: size.sql

package db

import (
	"context"
)

const createSize = `-- name: CreateSize :one
insert into "Size" ("Size") values ($1) RETURNING "SizeId", "Size"
`

func (q *Queries) CreateSize(ctx context.Context, size string) (Size, error) {
	row := q.db.QueryRowContext(ctx, createSize, size)
	var i Size
	err := row.Scan(&i.SizeId, &i.Size)
	return i, err
}

const deleteSize = `-- name: DeleteSize :exec
DELETE FROM
    "Size"
WHERE
    "SizeId" = $1
`

func (q *Queries) DeleteSize(ctx context.Context, sizeid int32) error {
	_, err := q.db.ExecContext(ctx, deleteSize, sizeid)
	return err
}

const findByIdSize = `-- name: FindByIdSize :one
SELECT
    "SizeId", "Size"
FROM
    "Size"
WHERE
    "SizeId" = $1
`

func (q *Queries) FindByIdSize(ctx context.Context, sizeid int32) (Size, error) {
	row := q.db.QueryRowContext(ctx, findByIdSize, sizeid)
	var i Size
	err := row.Scan(&i.SizeId, &i.Size)
	return i, err
}

const getAllSize = `-- name: GetAllSize :many
SELECT
    "SizeId", "Size"
FROM
    "Size"
`

func (q *Queries) GetAllSize(ctx context.Context) ([]Size, error) {
	rows, err := q.db.QueryContext(ctx, getAllSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Size
	for rows.Next() {
		var i Size
		if err := rows.Scan(&i.SizeId, &i.Size); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSize = `-- name: UpdateSize :one
UPDATE
    "Size"
SET
    "Size" = $1
WHERE   
    "SizeId" = $2 RETURNING "SizeId", "Size"
`

type UpdateSizeParams struct {
	Size   string
	SizeId int32
}

func (q *Queries) UpdateSize(ctx context.Context, arg UpdateSizeParams) (Size, error) {
	row := q.db.QueryRowContext(ctx, updateSize, arg.Size, arg.SizeId)
	var i Size
	err := row.Scan(&i.SizeId, &i.Size)
	return i, err
}
