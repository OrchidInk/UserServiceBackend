// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: payment.sql

package db

import (
	"context"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO "payments" (
    "OrderID",
    "UserID",
    "PaymentMethod",
    "PaymentStatus",
    "Amount"
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING "PaymentID", "OrderID", "UserID", "PaymentMethod", "PaymentStatus", "Amount", "Created_At", "Updated_At"
`

type CreatePaymentParams struct {
	OrderID       int32
	UserID        int32
	PaymentMethod string
	PaymentStatus string
	Amount        string
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment,
		arg.OrderID,
		arg.UserID,
		arg.PaymentMethod,
		arg.PaymentStatus,
		arg.Amount,
	)
	var i Payment
	err := row.Scan(
		&i.PaymentID,
		&i.OrderID,
		&i.UserID,
		&i.PaymentMethod,
		&i.PaymentStatus,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePayment = `-- name: DeletePayment :exec
DELETE FROM "payments"
WHERE
    "PaymentID" = $1
`

func (q *Queries) DeletePayment(ctx context.Context, paymentid int32) error {
	_, err := q.db.ExecContext(ctx, deletePayment, paymentid)
	return err
}

const findByPaymentsId = `-- name: FindByPaymentsId :one
SELECT
    "PaymentID", "OrderID", "UserID", "PaymentMethod", "PaymentStatus", "Amount", "Created_At", "Updated_At"
FROM
    "payments"
WHERE
    "PaymentID" = $1
LIMIT 
1
`

func (q *Queries) FindByPaymentsId(ctx context.Context, paymentid int32) (Payment, error) {
	row := q.db.QueryRowContext(ctx, findByPaymentsId, paymentid)
	var i Payment
	err := row.Scan(
		&i.PaymentID,
		&i.OrderID,
		&i.UserID,
		&i.PaymentMethod,
		&i.PaymentStatus,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getListPayment = `-- name: GetListPayment :many
SELECT
    "PaymentID", "OrderID", "UserID", "PaymentMethod", "PaymentStatus", "Amount", "Created_At", "Updated_At"
FROM
    "payments"
`

func (q *Queries) GetListPayment(ctx context.Context) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, getListPayment)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.PaymentID,
			&i.OrderID,
			&i.UserID,
			&i.PaymentMethod,
			&i.PaymentStatus,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentStatus = `-- name: UpdatePaymentStatus :one
UPDATE
    "payments"
SET
    "PaymentStatus" = $1
WHERE
    "PaymentID" = $2 RETURNING "PaymentID", "OrderID", "UserID", "PaymentMethod", "PaymentStatus", "Amount", "Created_At", "Updated_At"
`

type UpdatePaymentStatusParams struct {
	PaymentStatus string
	PaymentID     int32
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, updatePaymentStatus, arg.PaymentStatus, arg.PaymentID)
	var i Payment
	err := row.Scan(
		&i.PaymentID,
		&i.OrderID,
		&i.UserID,
		&i.PaymentMethod,
		&i.PaymentStatus,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
