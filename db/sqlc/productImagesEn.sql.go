// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: productImagesEn.sql

package db

import (
	"context"
)

const createImagesEn = `-- name: CreateImagesEn :one
INSERT INTO
    "imagesEn" (
        "ProductEnID",
        "ImagePath"
    )
VALUES
    (
        $1,
        $2
    ) RETURNING "Id", "ProductEnID", "ImagePath", "Created_At"
`

type CreateImagesEnParams struct {
	ProductEnID int32
	ImagePath   string
}

func (q *Queries) CreateImagesEn(ctx context.Context, arg CreateImagesEnParams) (ImagesEn, error) {
	row := q.db.QueryRowContext(ctx, createImagesEn, arg.ProductEnID, arg.ImagePath)
	var i ImagesEn
	err := row.Scan(
		&i.Id,
		&i.ProductEnID,
		&i.ImagePath,
		&i.CreatedAt,
	)
	return i, err
}

const deleteImagesEn = `-- name: DeleteImagesEn :exec
DELETE FROM
    "imagesEn"
WHERE
    "Id" = $1
`

func (q *Queries) DeleteImagesEn(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteImagesEn, id)
	return err
}

const getListImagesEn = `-- name: GetListImagesEn :many
SELECT
    "Id", "ProductEnID", "ImagePath", "Created_At"
FROM
    "imagesEn"
`

func (q *Queries) GetListImagesEn(ctx context.Context) ([]ImagesEn, error) {
	rows, err := q.db.QueryContext(ctx, getListImagesEn)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ImagesEn
	for rows.Next() {
		var i ImagesEn
		if err := rows.Scan(
			&i.Id,
			&i.ProductEnID,
			&i.ImagePath,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateImagesEn = `-- name: UpdateImagesEn :one
UPDATE
    "imagesEn"
SET
    "ImagePath" = $1
WHERE
    "Id" = $2 RETURNING "Id", "ProductEnID", "ImagePath", "Created_At"
`

type UpdateImagesEnParams struct {
	ImagePath string
	Id        int32
}

func (q *Queries) UpdateImagesEn(ctx context.Context, arg UpdateImagesEnParams) (ImagesEn, error) {
	row := q.db.QueryRowContext(ctx, updateImagesEn, arg.ImagePath, arg.Id)
	var i ImagesEn
	err := row.Scan(
		&i.Id,
		&i.ProductEnID,
		&i.ImagePath,
		&i.CreatedAt,
	)
	return i, err
}
