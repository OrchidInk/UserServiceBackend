// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: productEn.sql

package db

import (
	"context"
	"database/sql"
)

const createProductEn = `-- name: CreateProductEn :one
INSERT INTO
    "productEn" ("CategoryEnID", "PriceEn", "StockQuantity")
VALUES
    (
        "CategoryEnID" = $1,
        "PriceEn" = $2,
        "StockQuantity" = $3
    ) RETURNING "ProductEnID", "CategoryEnID", "PriceEn", "StockQuantity", "Created_At", "Updated_At"
`

type CreateProductEnParams struct {
	CategoryEnID  int32
	PriceEn       string
	StockQuantity int32
}

func (q *Queries) CreateProductEn(ctx context.Context, arg CreateProductEnParams) (ProductEn, error) {
	row := q.db.QueryRowContext(ctx, createProductEn, arg.CategoryEnID, arg.PriceEn, arg.StockQuantity)
	var i ProductEn
	err := row.Scan(
		&i.ProductEnID,
		&i.CategoryEnID,
		&i.PriceEn,
		&i.StockQuantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteByIdProducts = `-- name: DeleteByIdProducts :exec
DELETE from "productEn"
WHERE
    "ProductEnID" = $1
`

func (q *Queries) DeleteByIdProducts(ctx context.Context, productenid int32) error {
	_, err := q.db.ExecContext(ctx, deleteByIdProducts, productenid)
	return err
}

const getProductWithImages = `-- name: GetProductWithImages :many
SELECT
    p."ProductEnID", p."CategoryEnID", p."PriceEn", p."StockQuantity", p."Created_At", p."Updated_At", -- Product fields
    i."ImageURLEn" -- Image URL from productImages table
FROM
    "productEn" p
    LEFT JOIN "productImages" i ON p."ProductEnID" = i."ProductEnID"
WHERE
    p."ProductEnID" = $1
`

type GetProductWithImagesRow struct {
	ProductEnID   int32
	CategoryEnID  int32
	PriceEn       string
	StockQuantity int32
	CreatedAt     sql.NullTime
	UpdatedAt     sql.NullTime
	ImageURLEn    sql.NullString
}

func (q *Queries) GetProductWithImages(ctx context.Context, productenid int32) ([]GetProductWithImagesRow, error) {
	rows, err := q.db.QueryContext(ctx, getProductWithImages, productenid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductWithImagesRow
	for rows.Next() {
		var i GetProductWithImagesRow
		if err := rows.Scan(
			&i.ProductEnID,
			&i.CategoryEnID,
			&i.PriceEn,
			&i.StockQuantity,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ImageURLEn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
