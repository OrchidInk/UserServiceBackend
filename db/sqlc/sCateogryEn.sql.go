// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: sCateogryEn.sql

package db

import (
	"context"
)

const createSCategoryEn = `-- name: CreateSCategoryEn :one
INSERT INTO
    "sCategoryEn" (
        "sCategoryNameEn",
        "SubCategoryIDEn"   
    ) 
VALUES
    (
        $1 :: VARCHAR(100),
        $2 :: INT
    ) RETURNING "sCategoryIdEn", "sCategoryNameEn", "SubCategoryIDEn"
`

type CreateSCategoryEnParams struct {
	SCategoryNameEn string
	SubCategoryIDEn int32
}

func (q *Queries) CreateSCategoryEn(ctx context.Context, arg CreateSCategoryEnParams) (SCategoryEn, error) {
	row := q.db.QueryRowContext(ctx, createSCategoryEn, arg.SCategoryNameEn, arg.SubCategoryIDEn)
	var i SCategoryEn
	err := row.Scan(&i.SCategoryIdEn, &i.SCategoryNameEn, &i.SubCategoryIDEn)
	return i, err
}

const deleteSCategoryEn = `-- name: DeleteSCategoryEn :exec
DELETE FROM
    "sCategoryEn"
WHERE
    "sCategoryIdEn" = $1
`

func (q *Queries) DeleteSCategoryEn(ctx context.Context, scategoryiden int32) error {
	_, err := q.db.ExecContext(ctx, deleteSCategoryEn, scategoryiden)
	return err
}

const findByNameSCategoryNameEn = `-- name: FindByNameSCategoryNameEn :one
SELECT
    "sCategoryIdEn", "sCategoryNameEn", "SubCategoryIDEn"
FROM
    "sCategoryEn"
WHERE
    "sCategoryNameEn" = $1
LIMIT 1
`

func (q *Queries) FindByNameSCategoryNameEn(ctx context.Context, scategorynameen string) (SCategoryEn, error) {
	row := q.db.QueryRowContext(ctx, findByNameSCategoryNameEn, scategorynameen)
	var i SCategoryEn
	err := row.Scan(&i.SCategoryIdEn, &i.SCategoryNameEn, &i.SubCategoryIDEn)
	return i, err
}

const findBySCategoryIdEn = `-- name: FindBySCategoryIdEn :one
SELECT
    "sCategoryIdEn", "sCategoryNameEn", "SubCategoryIDEn"
FROM
    "sCategoryEn"
WHERE
    "sCategoryIdEn" = $1
LIMIT 1
`

func (q *Queries) FindBySCategoryIdEn(ctx context.Context, scategoryiden int32) (SCategoryEn, error) {
	row := q.db.QueryRowContext(ctx, findBySCategoryIdEn, scategoryiden)
	var i SCategoryEn
	err := row.Scan(&i.SCategoryIdEn, &i.SCategoryNameEn, &i.SubCategoryIDEn)
	return i, err
}

const getAllSCategoryEn = `-- name: GetAllSCategoryEn :many
SELECT
    "sCategoryIdEn", "sCategoryNameEn", "SubCategoryIDEn"
FROM
    "sCategoryEn"
`

func (q *Queries) GetAllSCategoryEn(ctx context.Context) ([]SCategoryEn, error) {
	rows, err := q.db.QueryContext(ctx, getAllSCategoryEn)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SCategoryEn
	for rows.Next() {
		var i SCategoryEn
		if err := rows.Scan(&i.SCategoryIdEn, &i.SCategoryNameEn, &i.SubCategoryIDEn); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductBySCategoryEn = `-- name: GetProductBySCategoryEn :many
SELECT
    p."ProductEnID",
    p."ProductNameEn",
    p."PriceEn",
    p."StockQuantity",
    p."ImagesPathEn"
FROM
    "sCategoryEn" sc
    JOIN "productEn" p ON sc."sCategoryIdEn" = p."sCategoryIdEn"
WHERE
    sc."sCategoryIdEn" = $1
`

type GetProductBySCategoryEnRow struct {
	ProductEnID   int32
	ProductNameEn string
	PriceEn       string
	StockQuantity int32
	ImagesPathEn  string
}

func (q *Queries) GetProductBySCategoryEn(ctx context.Context, scategoryiden int32) ([]GetProductBySCategoryEnRow, error) {
	rows, err := q.db.QueryContext(ctx, getProductBySCategoryEn, scategoryiden)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductBySCategoryEnRow
	for rows.Next() {
		var i GetProductBySCategoryEnRow
		if err := rows.Scan(
			&i.ProductEnID,
			&i.ProductNameEn,
			&i.PriceEn,
			&i.StockQuantity,
			&i.ImagesPathEn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSCategoryByIdEn = `-- name: UpdateSCategoryByIdEn :exec
UPDATE
    "sCategoryEn"
SET
    "sCategoryNameEn" = $1,
    "SubCategoryIDEn" = $2
WHERE
    "sCategoryIdEn" = $3 RETURNING "sCategoryIdEn", "sCategoryNameEn", "SubCategoryIDEn"
`

type UpdateSCategoryByIdEnParams struct {
	SCategoryNameEn string
	SubCategoryIDEn int32
	SCategoryIdEn   int32
}

func (q *Queries) UpdateSCategoryByIdEn(ctx context.Context, arg UpdateSCategoryByIdEnParams) error {
	_, err := q.db.ExecContext(ctx, updateSCategoryByIdEn, arg.SCategoryNameEn, arg.SubCategoryIDEn, arg.SCategoryIdEn)
	return err
}

const updateSCategoryNameEn = `-- name: UpdateSCategoryNameEn :one
UPDATE
    "sCategoryEn"
SET
    "sCategoryNameEn" = $1 :: VARCHAR(100)
WHERE
    "sCategoryIdEn" = $2 RETURNING "sCategoryIdEn", "sCategoryNameEn", "SubCategoryIDEn"
`

type UpdateSCategoryNameEnParams struct {
	SCategoryNameEn string
	SCategoryIdEn   int32
}

func (q *Queries) UpdateSCategoryNameEn(ctx context.Context, arg UpdateSCategoryNameEnParams) (SCategoryEn, error) {
	row := q.db.QueryRowContext(ctx, updateSCategoryNameEn, arg.SCategoryNameEn, arg.SCategoryIdEn)
	var i SCategoryEn
	err := row.Scan(&i.SCategoryIdEn, &i.SCategoryNameEn, &i.SubCategoryIDEn)
	return i, err
}
