// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: categoryEn.sql

package db

import (
	"context"
	"database/sql"
)

const createCategoryEn = `-- name: CreateCategoryEn :one
INSERT INTO
    "categoryEn" ("CategoryNameEn")
VALUES
    ($1) RETURNING "CategoryEnID", "CategoryNameEn"
`

func (q *Queries) CreateCategoryEn(ctx context.Context, categorynameen string) (CategoryEn, error) {
	row := q.db.QueryRowContext(ctx, createCategoryEn, categorynameen)
	var i CategoryEn
	err := row.Scan(&i.CategoryEnID, &i.CategoryNameEn)
	return i, err
}

const deleteCategoryById = `-- name: DeleteCategoryById :exec
DELETE FROM
    "categoryEn"
WHERE
    "CategoryEnID" = $1 :: INT
`

func (q *Queries) DeleteCategoryById(ctx context.Context, categoryenid int32) error {
	_, err := q.db.ExecContext(ctx, deleteCategoryById, categoryenid)
	return err
}

const findByCategoryEnId = `-- name: FindByCategoryEnId :one
SELECT
    "CategoryEnID", "CategoryNameEn"
FROM
    "categoryEn"
WHERE
    "CategoryEnID" = $1
LIMIT
    1
`

func (q *Queries) FindByCategoryEnId(ctx context.Context, categoryenid int32) (CategoryEn, error) {
	row := q.db.QueryRowContext(ctx, findByCategoryEnId, categoryenid)
	var i CategoryEn
	err := row.Scan(&i.CategoryEnID, &i.CategoryNameEn)
	return i, err
}

const findByIdCategoryEn = `-- name: FindByIdCategoryEn :one
SELECT
    "CategoryEnID", "CategoryNameEn"
FROM
    "categoryEn"
WHERE
    "CategoryEnID" = $1
LIMIT
    1
`

func (q *Queries) FindByIdCategoryEn(ctx context.Context, categoryenid int32) (CategoryEn, error) {
	row := q.db.QueryRowContext(ctx, findByIdCategoryEn, categoryenid)
	var i CategoryEn
	err := row.Scan(&i.CategoryEnID, &i.CategoryNameEn)
	return i, err
}

const findByNameCategoryEn = `-- name: FindByNameCategoryEn :one
SELECT
    "CategoryEnID", "CategoryNameEn"
FROM
    "categoryEn"
WHERE
    "CategoryNameEn" = $1
LIMIT
    1
`

func (q *Queries) FindByNameCategoryEn(ctx context.Context, categorynameen string) (CategoryEn, error) {
	row := q.db.QueryRowContext(ctx, findByNameCategoryEn, categorynameen)
	var i CategoryEn
	err := row.Scan(&i.CategoryEnID, &i.CategoryNameEn)
	return i, err
}

const findSubCategoriesAndProductsByCategoryIDEn = `-- name: FindSubCategoriesAndProductsByCategoryIDEn :many
SELECT
    c."CategoryEnID",
    c."CategoryNameEn",
    sc."SubCategoryIDEn",
    sc."subCategoryNameEn",
    scc."sCategoryIdEn",
    scc."sCategoryNameEn",
    p."ProductEnID",
    p."ProductNameEn",
    p."PriceEn",
    p."StockQuantity",
    COALESCE(pi."ImagePath", p."ImagesPathEn") as "ImagesPathEn"
FROM
    "categoryEn" c
    LEFT JOIN "subCategoryEn" sc ON c."CategoryEnID" = sc."CategoryEnID"
    LEFT JOIN "sCategoryEn" scc ON scc."SubCategoryIDEn" = sc."SubCategoryIDEn"
    LEFT JOIN "productEn" p ON scc."sCategoryIdEn" = p."sCategoryIdEn"
    LEFT JOIN "productImagesEn" pi ON p."ProductEnID" = pi."ProductEnID"
WHERE
    c."CategoryEnID" = $1
ORDER BY
    scc."sCategoryIdEn",
    p."ProductEnID"
`

type FindSubCategoriesAndProductsByCategoryIDEnRow struct {
	CategoryEnID      int32
	CategoryNameEn    string
	SubCategoryIDEn   sql.NullInt32
	SubCategoryNameEn sql.NullString
	SCategoryIdEn     sql.NullInt32
	SCategoryNameEn   sql.NullString
	ProductEnID       sql.NullInt32
	ProductNameEn     sql.NullString
	PriceEn           sql.NullString
	StockQuantity     sql.NullInt32
	ImagesPathEn      string
}

func (q *Queries) FindSubCategoriesAndProductsByCategoryIDEn(ctx context.Context, categoryenid int32) ([]FindSubCategoriesAndProductsByCategoryIDEnRow, error) {
	rows, err := q.db.QueryContext(ctx, findSubCategoriesAndProductsByCategoryIDEn, categoryenid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindSubCategoriesAndProductsByCategoryIDEnRow
	for rows.Next() {
		var i FindSubCategoriesAndProductsByCategoryIDEnRow
		if err := rows.Scan(
			&i.CategoryEnID,
			&i.CategoryNameEn,
			&i.SubCategoryIDEn,
			&i.SubCategoryNameEn,
			&i.SCategoryIdEn,
			&i.SCategoryNameEn,
			&i.ProductEnID,
			&i.ProductNameEn,
			&i.PriceEn,
			&i.StockQuantity,
			&i.ImagesPathEn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoriesWithSubCategories = `-- name: GetCategoriesWithSubCategories :many
SELECT
    c."CategoryEnID",
    c."CategoryNameEn",
    sc."SubCategoryIDEn",
    sc."subCategoryNameEn",
    scc."sCategoryIdEn",
    scc."sCategoryNameEn"
FROM
    "categoryEn" c
    LEFT JOIN "subCategoryEn" sc ON c."CategoryEnID" = sc."CategoryEnID"
    LEFT JOIN "sCategoryEn" scc ON scc."SubCategoryIDEn" = sc."SubCategoryIDEn"
ORDER BY
    c."CategoryEnID"
`

type GetCategoriesWithSubCategoriesRow struct {
	CategoryEnID      int32
	CategoryNameEn    string
	SubCategoryIDEn   sql.NullInt32
	SubCategoryNameEn sql.NullString
	SCategoryIdEn     sql.NullInt32
	SCategoryNameEn   sql.NullString
}

func (q *Queries) GetCategoriesWithSubCategories(ctx context.Context) ([]GetCategoriesWithSubCategoriesRow, error) {
	rows, err := q.db.QueryContext(ctx, getCategoriesWithSubCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCategoriesWithSubCategoriesRow
	for rows.Next() {
		var i GetCategoriesWithSubCategoriesRow
		if err := rows.Scan(
			&i.CategoryEnID,
			&i.CategoryNameEn,
			&i.SubCategoryIDEn,
			&i.SubCategoryNameEn,
			&i.SCategoryIdEn,
			&i.SCategoryNameEn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoriesWithSubCategoriesAndProductsEn = `-- name: GetCategoriesWithSubCategoriesAndProductsEn :many
SELECT
    c."CategoryEnID",
    c."CategoryNameEn",
    sc."SubCategoryIDEn",
    sc."subCategoryNameEn",
    scc."sCategoryIdEn",
    scc."sCategoryNameEn",
    p."ProductEnID",
    p."ProductNameEn",
    p."PriceEn",
    p."StockQuantity",
    COALESCE(pi."ImagePath", p."ImagesPathEn") as "ImagesPathEn"
FROM
    "categoryEn" c
    LEFT JOIN "subCategoryEn" sc ON c."CategoryEnID" = sc."CategoryEnID"
    LEFT JOIN "sCategoryEn" scc ON scc."SubCategoryIDEn" = sc."SubCategoryIDEn"
    LEFT JOIN "productEn" p ON scc."sCategoryIdEn" = p."sCategoryIdEn"
    LEFT JOIN "productImagesEn" pi ON p."ProductEnID" = pi."ProductEnID"
ORDER BY
    c."CategoryEnID",
    scc."sCategoryIdEn",
    p."ProductEnID"
`

type GetCategoriesWithSubCategoriesAndProductsEnRow struct {
	CategoryEnID      int32
	CategoryNameEn    string
	SubCategoryIDEn   sql.NullInt32
	SubCategoryNameEn sql.NullString
	SCategoryIdEn     sql.NullInt32
	SCategoryNameEn   sql.NullString
	ProductEnID       sql.NullInt32
	ProductNameEn     sql.NullString
	PriceEn           sql.NullString
	StockQuantity     sql.NullInt32
	ImagesPathEn      string
}

func (q *Queries) GetCategoriesWithSubCategoriesAndProductsEn(ctx context.Context) ([]GetCategoriesWithSubCategoriesAndProductsEnRow, error) {
	rows, err := q.db.QueryContext(ctx, getCategoriesWithSubCategoriesAndProductsEn)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCategoriesWithSubCategoriesAndProductsEnRow
	for rows.Next() {
		var i GetCategoriesWithSubCategoriesAndProductsEnRow
		if err := rows.Scan(
			&i.CategoryEnID,
			&i.CategoryNameEn,
			&i.SubCategoryIDEn,
			&i.SubCategoryNameEn,
			&i.SCategoryIdEn,
			&i.SCategoryNameEn,
			&i.ProductEnID,
			&i.ProductNameEn,
			&i.PriceEn,
			&i.StockQuantity,
			&i.ImagesPathEn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListByAllCategoryEn = `-- name: GetListByAllCategoryEn :many
SELECT
    "CategoryEnID", "CategoryNameEn"
FROM
    "categoryEn"
`

func (q *Queries) GetListByAllCategoryEn(ctx context.Context) ([]CategoryEn, error) {
	rows, err := q.db.QueryContext(ctx, getListByAllCategoryEn)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CategoryEn
	for rows.Next() {
		var i CategoryEn
		if err := rows.Scan(&i.CategoryEnID, &i.CategoryNameEn); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategoryEn = `-- name: UpdateCategoryEn :one
UPDATE
    "categoryEn"
SET
    "CategoryNameEn" = $1 :: VARCHAR(100)
WHERE
    "CategoryEnID" = $2 :: INT RETURNING "CategoryEnID", "CategoryNameEn"
`

type UpdateCategoryEnParams struct {
	CategoryNameEn string
	CategoryEnID   int32
}

func (q *Queries) UpdateCategoryEn(ctx context.Context, arg UpdateCategoryEnParams) (CategoryEn, error) {
	row := q.db.QueryRowContext(ctx, updateCategoryEn, arg.CategoryNameEn, arg.CategoryEnID)
	var i CategoryEn
	err := row.Scan(&i.CategoryEnID, &i.CategoryNameEn)
	return i, err
}
