// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: categoryEn.sql

package db

import (
	"context"
)

const createCategoryEn = `-- name: CreateCategoryEn :one
INSERT INTO
    "categoryEn" ("CategoryNameEn")
VALUES
    (
        $1 :: VARCHAR(100)
    ) RETURNING "CategoryEnID", "CategoryNameEn"
`

func (q *Queries) CreateCategoryEn(ctx context.Context, categorynameen string) (CategoryEn, error) {
	row := q.db.QueryRowContext(ctx, createCategoryEn, categorynameen)
	var i CategoryEn
	err := row.Scan(&i.CategoryEnID, &i.CategoryNameEn)
	return i, err
}

const deleteByIdCategoryEn = `-- name: DeleteByIdCategoryEn :exec
DELETE FROM
    "categoryEn"
WHERE
    "CategoryEnID" = $1
`

func (q *Queries) DeleteByIdCategoryEn(ctx context.Context, categoryenid int32) error {
	_, err := q.db.ExecContext(ctx, deleteByIdCategoryEn, categoryenid)
	return err
}

const findByCategoryEnId = `-- name: FindByCategoryEnId :one
SELECT
    "CategoryEnID", "CategoryNameEn"
FROM
    "categoryEn"
WHERE
    "CategoryEnID" = $1
LIMIT
    1
`

func (q *Queries) FindByCategoryEnId(ctx context.Context, categoryenid int32) (CategoryEn, error) {
	row := q.db.QueryRowContext(ctx, findByCategoryEnId, categoryenid)
	var i CategoryEn
	err := row.Scan(&i.CategoryEnID, &i.CategoryNameEn)
	return i, err
}

const findByIdCategoryEn = `-- name: FindByIdCategoryEn :one
SELECT
    "CategoryEnID", "CategoryNameEn"
FROM
    "categoryEn"
WHERE
    "CategoryEnID" = $1
LIMIT
    1
`

func (q *Queries) FindByIdCategoryEn(ctx context.Context, categoryenid int32) (CategoryEn, error) {
	row := q.db.QueryRowContext(ctx, findByIdCategoryEn, categoryenid)
	var i CategoryEn
	err := row.Scan(&i.CategoryEnID, &i.CategoryNameEn)
	return i, err
}

const findByNameCategoryEn = `-- name: FindByNameCategoryEn :one
SELECT
    "CategoryEnID", "CategoryNameEn"
FROM
    "categoryEn"
WHERE
    "CategoryNameEn" = $1 :: VARCHAR(100)
LIMIT
    1
`

func (q *Queries) FindByNameCategoryEn(ctx context.Context, categorynameen string) (CategoryEn, error) {
	row := q.db.QueryRowContext(ctx, findByNameCategoryEn, categorynameen)
	var i CategoryEn
	err := row.Scan(&i.CategoryEnID, &i.CategoryNameEn)
	return i, err
}

const getListByAllCategoryEn = `-- name: GetListByAllCategoryEn :many
SELECT
    "CategoryEnID", "CategoryNameEn"
FROM
    "categoryEn"
`

func (q *Queries) GetListByAllCategoryEn(ctx context.Context) ([]CategoryEn, error) {
	rows, err := q.db.QueryContext(ctx, getListByAllCategoryEn)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CategoryEn
	for rows.Next() {
		var i CategoryEn
		if err := rows.Scan(&i.CategoryEnID, &i.CategoryNameEn); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategoryEn = `-- name: UpdateCategoryEn :one
UPDATE
    "categoryEn"
SET
    "CategoryNameEn" = $1 :: VARCHAR(100)
WHERE
    "CategoryEnID" = $2 RETURNING "CategoryEnID", "CategoryNameEn"
`

type UpdateCategoryEnParams struct {
	CategoryNameEn string
	CategoryEnID   int32
}

func (q *Queries) UpdateCategoryEn(ctx context.Context, arg UpdateCategoryEnParams) (CategoryEn, error) {
	row := q.db.QueryRowContext(ctx, updateCategoryEn, arg.CategoryNameEn, arg.CategoryEnID)
	var i CategoryEn
	err := row.Scan(&i.CategoryEnID, &i.CategoryNameEn)
	return i, err
}
