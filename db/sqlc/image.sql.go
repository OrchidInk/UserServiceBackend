// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: image.sql

package db

import (
	"context"
)

const createImages = `-- name: CreateImages :one
INSERT INTO
    "images" ("ImagePath")
VALUES
    ($1 :: TEXT) RETURNING "Id", "ProductMnID", "ImagePath", "Created_At"
`

func (q *Queries) CreateImages(ctx context.Context, imagepath string) (Image, error) {
	row := q.db.QueryRowContext(ctx, createImages, imagepath)
	var i Image
	err := row.Scan(
		&i.Id,
		&i.ProductMnID,
		&i.ImagePath,
		&i.CreatedAt,
	)
	return i, err
}

const deleteByImages = `-- name: DeleteByImages :exec
DELETE FROM
    "images"
WHERE
    "Id" = $1
`

func (q *Queries) DeleteByImages(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteByImages, id)
	return err
}

const findByImageId = `-- name: FindByImageId :one
SELECT
    "Id", "ProductMnID", "ImagePath", "Created_At"
FROM
    "images"
WHERE
    "Id" = $1
LIMIT
    1
`

func (q *Queries) FindByImageId(ctx context.Context, id int32) (Image, error) {
	row := q.db.QueryRowContext(ctx, findByImageId, id)
	var i Image
	err := row.Scan(
		&i.Id,
		&i.ProductMnID,
		&i.ImagePath,
		&i.CreatedAt,
	)
	return i, err
}

const findByImageUrl = `-- name: FindByImageUrl :one
SELECT
    "Id", "ProductMnID", "ImagePath", "Created_At"
FROM
    "images"
WHERE
    "ImagePath" = $1 :: TEXT
LIMIT
    1
`

func (q *Queries) FindByImageUrl(ctx context.Context, imagepath string) (Image, error) {
	row := q.db.QueryRowContext(ctx, findByImageUrl, imagepath)
	var i Image
	err := row.Scan(
		&i.Id,
		&i.ProductMnID,
		&i.ImagePath,
		&i.CreatedAt,
	)
	return i, err
}

const findByListImages = `-- name: FindByListImages :many
SELECT
    "Id", "ProductMnID", "ImagePath", "Created_At"
FROM
    "images"
ORDER BY
    "Created_At" DESC
`

func (q *Queries) FindByListImages(ctx context.Context) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, findByListImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.Id,
			&i.ProductMnID,
			&i.ImagePath,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
