// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: delivery.sql

package db

import (
	"context"
)

const createDelivery = `-- name: CreateDelivery :one
INSERT INTO
    "delivery" (
        "DeliverName",
        "OrderId",
        "DeliveryAmount"
    )
VALUES
    (
        $1,
        $2,
        $3
    ) RETURNING "DeliverId", "DeliverName", "OrderId", "DeliveryAmount", "CreatedAt"
`

type CreateDeliveryParams struct {
	DeliverName    string
	OrderId        int32
	DeliveryAmount string
}

func (q *Queries) CreateDelivery(ctx context.Context, arg CreateDeliveryParams) (Delivery, error) {
	row := q.db.QueryRowContext(ctx, createDelivery, arg.DeliverName, arg.OrderId, arg.DeliveryAmount)
	var i Delivery
	err := row.Scan(
		&i.DeliverId,
		&i.DeliverName,
		&i.OrderId,
		&i.DeliveryAmount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteDelivery = `-- name: DeleteDelivery :exec
DELETE FROM
    "delivery"
WHERE
    "DeliverId" = $1
`

func (q *Queries) DeleteDelivery(ctx context.Context, deliverid int32) error {
	_, err := q.db.ExecContext(ctx, deleteDelivery, deliverid)
	return err
}

const findByDeliveryId = `-- name: FindByDeliveryId :one
SELECT
    "DeliverId", "DeliverName", "OrderId", "DeliveryAmount", "CreatedAt"
FROM
    "delivery"
WHERE
    "DeliverId" = $1
LIMIT
    1
`

func (q *Queries) FindByDeliveryId(ctx context.Context, deliverid int32) (Delivery, error) {
	row := q.db.QueryRowContext(ctx, findByDeliveryId, deliverid)
	var i Delivery
	err := row.Scan(
		&i.DeliverId,
		&i.DeliverName,
		&i.OrderId,
		&i.DeliveryAmount,
		&i.CreatedAt,
	)
	return i, err
}

const getListDeliver = `-- name: GetListDeliver :many
SELECT
    "DeliverId", "DeliverName", "OrderId", "DeliveryAmount", "CreatedAt"
FROM
    "delivery"
`

func (q *Queries) GetListDeliver(ctx context.Context) ([]Delivery, error) {
	rows, err := q.db.QueryContext(ctx, getListDeliver)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Delivery
	for rows.Next() {
		var i Delivery
		if err := rows.Scan(
			&i.DeliverId,
			&i.DeliverName,
			&i.OrderId,
			&i.DeliveryAmount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDeliver = `-- name: UpdateDeliver :one
UPDATE
    "delivery"
SET
    "DeliverName" = $1
WHERE
    "DeliverId" = $2 RETURNING "DeliverId", "DeliverName", "OrderId", "DeliveryAmount", "CreatedAt"
`

type UpdateDeliverParams struct {
	DeliverName string
	DeliverId   int32
}

func (q *Queries) UpdateDeliver(ctx context.Context, arg UpdateDeliverParams) (Delivery, error) {
	row := q.db.QueryRowContext(ctx, updateDeliver, arg.DeliverName, arg.DeliverId)
	var i Delivery
	err := row.Scan(
		&i.DeliverId,
		&i.DeliverName,
		&i.OrderId,
		&i.DeliveryAmount,
		&i.CreatedAt,
	)
	return i, err
}
