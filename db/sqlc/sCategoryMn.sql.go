// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: sCategoryMn.sql

package db

import (
	"context"
)

const createSCategoryMn = `-- name: CreateSCategoryMn :one
INSERT INTO
    "sCategoryMn" (
        "sCategoryName",
        "SubCategoryIDMn"
    )
VALUES
    (
        $1 :: VARCHAR(100),
        $2 :: INT
    ) RETURNING "sCategoryIdMn", "sCategoryName", "SubCategoryIDMn"
`

type CreateSCategoryMnParams struct {
	SCategoryName   string
	SubCategoryIDMn int32
}

func (q *Queries) CreateSCategoryMn(ctx context.Context, arg CreateSCategoryMnParams) (SCategoryMn, error) {
	row := q.db.QueryRowContext(ctx, createSCategoryMn, arg.SCategoryName, arg.SubCategoryIDMn)
	var i SCategoryMn
	err := row.Scan(&i.SCategoryIdMn, &i.SCategoryName, &i.SubCategoryIDMn)
	return i, err
}

const deleteSCategoryMn = `-- name: DeleteSCategoryMn :exec
DELETE FROM
    "sCategoryMn"
WHERE
    "sCategoryIdMn" = $1
`

func (q *Queries) DeleteSCategoryMn(ctx context.Context, scategoryidmn int32) error {
	_, err := q.db.ExecContext(ctx, deleteSCategoryMn, scategoryidmn)
	return err
}

const findBySCategoryIdMn = `-- name: FindBySCategoryIdMn :one
SELECT
    "sCategoryIdMn", "sCategoryName", "SubCategoryIDMn"
FROM
    "sCategoryMn"
WHERE
    "sCategoryIdMn" = $1
LIMIT 1
`

func (q *Queries) FindBySCategoryIdMn(ctx context.Context, scategoryidmn int32) (SCategoryMn, error) {
	row := q.db.QueryRowContext(ctx, findBySCategoryIdMn, scategoryidmn)
	var i SCategoryMn
	err := row.Scan(&i.SCategoryIdMn, &i.SCategoryName, &i.SubCategoryIDMn)
	return i, err
}

const findBySCategoryNameMn = `-- name: FindBySCategoryNameMn :one
SELECT  
    "sCategoryIdMn", "sCategoryName", "SubCategoryIDMn"
FROM
    "sCategoryMn"
WHERE
    "sCategoryName" = $1
LIMIT
 1
`

func (q *Queries) FindBySCategoryNameMn(ctx context.Context, scategoryname string) (SCategoryMn, error) {
	row := q.db.QueryRowContext(ctx, findBySCategoryNameMn, scategoryname)
	var i SCategoryMn
	err := row.Scan(&i.SCategoryIdMn, &i.SCategoryName, &i.SubCategoryIDMn)
	return i, err
}

const getAllSCategoriesMn = `-- name: GetAllSCategoriesMn :many
SELECT
    "sCategoryIdMn", "sCategoryName", "SubCategoryIDMn"
FROM
    "sCategoryMn"
`

func (q *Queries) GetAllSCategoriesMn(ctx context.Context) ([]SCategoryMn, error) {
	rows, err := q.db.QueryContext(ctx, getAllSCategoriesMn)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SCategoryMn
	for rows.Next() {
		var i SCategoryMn
		if err := rows.Scan(&i.SCategoryIdMn, &i.SCategoryName, &i.SubCategoryIDMn); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductBySCategoriesMn = `-- name: GetProductBySCategoriesMn :many
SELECT
    p."ProductMnID",
    p."ProductNameMn",
    p."PriceMn",
    p."StockQuantity",
    p."ImagesPathMn"
FROM
    "sCategoryMn" sc
    JOIN "productMn" p ON sc."sCategoryIdMn" = p."sCategoryIdMn"
WHERE
    sc."sCategoryIdMn" = $1
`

type GetProductBySCategoriesMnRow struct {
	ProductMnID   int32
	ProductNameMn string
	PriceMn       string
	StockQuantity int32
	ImagesPathMn  string
}

func (q *Queries) GetProductBySCategoriesMn(ctx context.Context, scategoryidmn int32) ([]GetProductBySCategoriesMnRow, error) {
	rows, err := q.db.QueryContext(ctx, getProductBySCategoriesMn, scategoryidmn)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductBySCategoriesMnRow
	for rows.Next() {
		var i GetProductBySCategoriesMnRow
		if err := rows.Scan(
			&i.ProductMnID,
			&i.ProductNameMn,
			&i.PriceMn,
			&i.StockQuantity,
			&i.ImagesPathMn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSCategoryByIdMn = `-- name: UpdateSCategoryByIdMn :exec
UPDATE  
    "sCategoryMn"
SET
    "sCategoryName" = $1,
    "SubCategoryIDMn" = $2
WHERE
    "sCategoryIdMn" = $3 RETURNING "sCategoryIdMn", "sCategoryName", "SubCategoryIDMn"
`

type UpdateSCategoryByIdMnParams struct {
	SCategoryName   string
	SubCategoryIDMn int32
	SCategoryIdMn   int32
}

func (q *Queries) UpdateSCategoryByIdMn(ctx context.Context, arg UpdateSCategoryByIdMnParams) error {
	_, err := q.db.ExecContext(ctx, updateSCategoryByIdMn, arg.SCategoryName, arg.SubCategoryIDMn, arg.SCategoryIdMn)
	return err
}

const updateSCategoryNameMn = `-- name: UpdateSCategoryNameMn :one
UPDATE
    "sCategoryMn"
SET
    "sCategoryName" = $1 :: VARCHAR(100)
WHERE
    "sCategoryIdMn" = $2 RETURNING "sCategoryIdMn", "sCategoryName", "SubCategoryIDMn"
`

type UpdateSCategoryNameMnParams struct {
	SCategoryName string
	SCategoryIdMn int32
}

func (q *Queries) UpdateSCategoryNameMn(ctx context.Context, arg UpdateSCategoryNameMnParams) (SCategoryMn, error) {
	row := q.db.QueryRowContext(ctx, updateSCategoryNameMn, arg.SCategoryName, arg.SCategoryIdMn)
	var i SCategoryMn
	err := row.Scan(&i.SCategoryIdMn, &i.SCategoryName, &i.SubCategoryIDMn)
	return i, err
}
