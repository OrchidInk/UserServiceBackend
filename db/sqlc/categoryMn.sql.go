// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: categoryMn.sql

package db

import (
	"context"
)

const createCategoryMn = `-- name: CreateCategoryMn :one
INSERT INTO
    "categoryMn" ("CategoryNameMn")
VALUES
    (
        $1 :: VARCHAR(100)
    ) RETURNING "CategoryMnID", "CategoryNameMn"
`

func (q *Queries) CreateCategoryMn(ctx context.Context, categorynamemn string) (CategoryMn, error) {
	row := q.db.QueryRowContext(ctx, createCategoryMn, categorynamemn)
	var i CategoryMn
	err := row.Scan(&i.CategoryMnID, &i.CategoryNameMn)
	return i, err
}

const deleteCategoryByMnId = `-- name: DeleteCategoryByMnId :exec
DELETE FROM
    "categoryMn"
WHERE
    "CategoryMnID" = $1 :: INT
`

func (q *Queries) DeleteCategoryByMnId(ctx context.Context, categorymnid int32) error {
	_, err := q.db.ExecContext(ctx, deleteCategoryByMnId, categorymnid)
	return err
}

const findByCategoryMn = `-- name: FindByCategoryMn :one
SELECT
    "CategoryMnID", "CategoryNameMn"
FROM
    "categoryMn"
WHERE
    "CategoryMnID" = $1
LIMIT
    1
`

func (q *Queries) FindByCategoryMn(ctx context.Context, categorymnid int32) (CategoryMn, error) {
	row := q.db.QueryRowContext(ctx, findByCategoryMn, categorymnid)
	var i CategoryMn
	err := row.Scan(&i.CategoryMnID, &i.CategoryNameMn)
	return i, err
}

const findByCategoryMnId = `-- name: FindByCategoryMnId :one
SELECT
    "CategoryMnID", "CategoryNameMn"
FROM
    "categoryMn"
WHERE
    "CategoryMnID" = $1
LIMIT
    1
`

func (q *Queries) FindByCategoryMnId(ctx context.Context, categorymnid int32) (CategoryMn, error) {
	row := q.db.QueryRowContext(ctx, findByCategoryMnId, categorymnid)
	var i CategoryMn
	err := row.Scan(&i.CategoryMnID, &i.CategoryNameMn)
	return i, err
}

const findByNameMnCategoryMn = `-- name: FindByNameMnCategoryMn :one
SELECT
    "CategoryMnID", "CategoryNameMn"
FROM
    "categoryMn"
WHERE
    "CategoryNameMn" = $1 :: VARCHAR(100)
LIMIT
    1
`

func (q *Queries) FindByNameMnCategoryMn(ctx context.Context, categorynamemn string) (CategoryMn, error) {
	row := q.db.QueryRowContext(ctx, findByNameMnCategoryMn, categorynamemn)
	var i CategoryMn
	err := row.Scan(&i.CategoryMnID, &i.CategoryNameMn)
	return i, err
}

const getListByAllCategoryMn = `-- name: GetListByAllCategoryMn :many
SELECT
    "CategoryMnID", "CategoryNameMn"
FROM
    "categoryMn"
`

func (q *Queries) GetListByAllCategoryMn(ctx context.Context) ([]CategoryMn, error) {
	rows, err := q.db.QueryContext(ctx, getListByAllCategoryMn)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CategoryMn
	for rows.Next() {
		var i CategoryMn
		if err := rows.Scan(&i.CategoryMnID, &i.CategoryNameMn); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategoryMn = `-- name: UpdateCategoryMn :one
UPDATE
    "categoryMn"
SET
    "CategoryNameMn" = $1 :: VARCHAR(100)
WHERE
    "CategoryMnID" = $2 :: INT RETURNING "CategoryMnID", "CategoryNameMn"
`

type UpdateCategoryMnParams struct {
	CategoryNameMn string
	CategoryMnID   int32
}

func (q *Queries) UpdateCategoryMn(ctx context.Context, arg UpdateCategoryMnParams) (CategoryMn, error) {
	row := q.db.QueryRowContext(ctx, updateCategoryMn, arg.CategoryNameMn, arg.CategoryMnID)
	var i CategoryMn
	err := row.Scan(&i.CategoryMnID, &i.CategoryNameMn)
	return i, err
}
