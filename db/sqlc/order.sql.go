// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO "Orders" (
  "CustomerOrderId",
  "UserId",
  "PhoneNumber",
  "OrderItems",
  "CreatedAt"
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
)
RETURNING "OrderID", "CustomerOrderId", "UserId", "PhoneNumber", "OrderItems", "CreatedAt"
`

type CreateOrderParams struct {
	CustomerOrderID sql.NullInt32
	UserId          int32
	PhoneNumber     string
	OrderItems      json.RawMessage
	CreatedAt       sql.NullTime
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.CustomerOrderID,
		arg.UserId,
		arg.PhoneNumber,
		arg.OrderItems,
		arg.CreatedAt,
	)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.CustomerOrderId,
		&i.UserId,
		&i.PhoneNumber,
		&i.OrderItems,
		&i.CreatedAt,
	)
	return i, err
}

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO "OrderItems" (
  "OrderID",
  "ProductMnID",
  "ProductEnID",
  "Quantity",
  "PriceAtOrder",
  "SelectedColor",
  "SelectedSize"
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7
)
RETURNING "OrderItemID", "OrderID", "ProductMnID", "ProductEnID", "Quantity", "PriceAtOrder", "SelectedColor", "SelectedSize"
`

type CreateOrderItemParams struct {
	OrderID       int32
	ProductMnID   sql.NullInt32
	ProductEnID   sql.NullInt32
	Quantity      int32
	PriceAtOrder  string
	SelectedColor sql.NullString
	SelectedSize  sql.NullString
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem,
		arg.OrderID,
		arg.ProductMnID,
		arg.ProductEnID,
		arg.Quantity,
		arg.PriceAtOrder,
		arg.SelectedColor,
		arg.SelectedSize,
	)
	var i OrderItem
	err := row.Scan(
		&i.OrderItemID,
		&i.OrderID,
		&i.ProductMnID,
		&i.ProductEnID,
		&i.Quantity,
		&i.PriceAtOrder,
		&i.SelectedColor,
		&i.SelectedSize,
	)
	return i, err
}

const getOrdersWithDetails = `-- name: GetOrdersWithDetails :many
SELECT
    "OrderID", "CustomerOrderId", "UserId", "PhoneNumber", "OrderItems", "CreatedAt"
from
    "Orders"
`

func (q *Queries) GetOrdersWithDetails(ctx context.Context) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersWithDetails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.OrderID,
			&i.CustomerOrderId,
			&i.UserId,
			&i.PhoneNumber,
			&i.OrderItems,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
