// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subCategoryMn.sql

package db

import (
	"context"
)

const createSubCategoryMn = `-- name: CreateSubCategoryMn :one
INSERT INTO
    "subCategoryMn" (
        "subCategoryNameMn",
        "CategoryMnID"
    )
VALUES
    (
        $1 :: VARCHAR(100),
        $2 :: INT
    ) RETURNING "SubCategoryIDMn", "subCategoryNameMn", "CategoryMnID"
`

type CreateSubCategoryMnParams struct {
	SubCategoryNameMn string
	CategoryMnID      int32
}

func (q *Queries) CreateSubCategoryMn(ctx context.Context, arg CreateSubCategoryMnParams) (SubCategoryMn, error) {
	row := q.db.QueryRowContext(ctx, createSubCategoryMn, arg.SubCategoryNameMn, arg.CategoryMnID)
	var i SubCategoryMn
	err := row.Scan(&i.SubCategoryIDMn, &i.SubCategoryNameMn, &i.CategoryMnID)
	return i, err
}

const deleteBySubCategoryMn = `-- name: DeleteBySubCategoryMn :exec
DELETE FROM
    "subCategoryMn"
WHERE
    "SubCategoryIDMn" = $1
`

func (q *Queries) DeleteBySubCategoryMn(ctx context.Context, subcategoryidmn int32) error {
	_, err := q.db.ExecContext(ctx, deleteBySubCategoryMn, subcategoryidmn)
	return err
}

const findByNameSubCategoryMn = `-- name: FindByNameSubCategoryMn :one
SELECT
    "SubCategoryIDMn", "subCategoryNameMn", "CategoryMnID"
FROM
    "subCategoryMn"
WHERE
    "subCategoryNameMn" = $1
LIMIT
    1
`

func (q *Queries) FindByNameSubCategoryMn(ctx context.Context, subcategorynamemn string) (SubCategoryMn, error) {
	row := q.db.QueryRowContext(ctx, findByNameSubCategoryMn, subcategorynamemn)
	var i SubCategoryMn
	err := row.Scan(&i.SubCategoryIDMn, &i.SubCategoryNameMn, &i.CategoryMnID)
	return i, err
}

const findBySubCategoryID = `-- name: FindBySubCategoryID :one
SELECT
    "SubCategoryIDMn", "subCategoryNameMn", "CategoryMnID"
FROM
    "subCategoryMn"
WHERE
    "SubCategoryIDMn" = $1
LIMIT
    1
`

func (q *Queries) FindBySubCategoryID(ctx context.Context, subcategoryidmn int32) (SubCategoryMn, error) {
	row := q.db.QueryRowContext(ctx, findBySubCategoryID, subcategoryidmn)
	var i SubCategoryMn
	err := row.Scan(&i.SubCategoryIDMn, &i.SubCategoryNameMn, &i.CategoryMnID)
	return i, err
}

const getListAllSubCategoryMn = `-- name: GetListAllSubCategoryMn :many
SELECT
    "SubCategoryIDMn", "subCategoryNameMn", "CategoryMnID"
FROM
    "subCategoryMn"
`

func (q *Queries) GetListAllSubCategoryMn(ctx context.Context) ([]SubCategoryMn, error) {
	rows, err := q.db.QueryContext(ctx, getListAllSubCategoryMn)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubCategoryMn
	for rows.Next() {
		var i SubCategoryMn
		if err := rows.Scan(&i.SubCategoryIDMn, &i.SubCategoryNameMn, &i.CategoryMnID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsBySubCategoryMn = `-- name: GetProductsBySubCategoryMn :many
SELECT
    p."ProductMnID",
    p."ProductNameMn",
    p."PriceMn",
    p."StockQuantity",
    p."ImagesPathMn"
FROM
    "subCategoryMn" sc
    JOIN "productMn" p ON sc."SubCategoryIDMn" = p."SubCategoryIDMn"
WHERE
    sc."SubCategoryIDMn" = $1
`

type GetProductsBySubCategoryMnRow struct {
	ProductMnID   int32
	ProductNameMn string
	PriceMn       string
	StockQuantity int32
	ImagesPathMn  string
}

func (q *Queries) GetProductsBySubCategoryMn(ctx context.Context, subcategoryidmn int32) ([]GetProductsBySubCategoryMnRow, error) {
	rows, err := q.db.QueryContext(ctx, getProductsBySubCategoryMn, subcategoryidmn)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsBySubCategoryMnRow
	for rows.Next() {
		var i GetProductsBySubCategoryMnRow
		if err := rows.Scan(
			&i.ProductMnID,
			&i.ProductNameMn,
			&i.PriceMn,
			&i.StockQuantity,
			&i.ImagesPathMn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateByCategoryIDMn = `-- name: UpdateByCategoryIDMn :one
UPDATE
    "subCategoryMn"
SET
    "CategoryMnID" = $1 RETURNING "SubCategoryIDMn", "subCategoryNameMn", "CategoryMnID"
`

func (q *Queries) UpdateByCategoryIDMn(ctx context.Context, categorymnid int32) (SubCategoryMn, error) {
	row := q.db.QueryRowContext(ctx, updateByCategoryIDMn, categorymnid)
	var i SubCategoryMn
	err := row.Scan(&i.SubCategoryIDMn, &i.SubCategoryNameMn, &i.CategoryMnID)
	return i, err
}

const updateBySubCategoryNameMn = `-- name: UpdateBySubCategoryNameMn :one
UPDATE
    "subCategoryMn"
SET
    "subCategoryNameMn" = $1 :: VARCHAR(100)
WHERE
    "SubCategoryIDMn" = $2 RETURNING "SubCategoryIDMn", "subCategoryNameMn", "CategoryMnID"
`

type UpdateBySubCategoryNameMnParams struct {
	SubCategoryNameMn string
	SubCategoryIDMn   int32
}

func (q *Queries) UpdateBySubCategoryNameMn(ctx context.Context, arg UpdateBySubCategoryNameMnParams) (SubCategoryMn, error) {
	row := q.db.QueryRowContext(ctx, updateBySubCategoryNameMn, arg.SubCategoryNameMn, arg.SubCategoryIDMn)
	var i SubCategoryMn
	err := row.Scan(&i.SubCategoryIDMn, &i.SubCategoryNameMn, &i.CategoryMnID)
	return i, err
}

const updateSubCategoryByIDMn = `-- name: UpdateSubCategoryByIDMn :one
UPDATE
    "subCategoryMn"
SET
    "subCategoryNameMn" = $1,
    "CategoryMnID" = $2
WHERE
    "SubCategoryIDMn" = $3 RETURNING "SubCategoryIDMn", "subCategoryNameMn", "CategoryMnID"
`

type UpdateSubCategoryByIDMnParams struct {
	SubCategoryNameMn string
	CategoryMnID      int32
	SubCategoryIDMn   int32
}

func (q *Queries) UpdateSubCategoryByIDMn(ctx context.Context, arg UpdateSubCategoryByIDMnParams) (SubCategoryMn, error) {
	row := q.db.QueryRowContext(ctx, updateSubCategoryByIDMn, arg.SubCategoryNameMn, arg.CategoryMnID, arg.SubCategoryIDMn)
	var i SubCategoryMn
	err := row.Scan(&i.SubCategoryIDMn, &i.SubCategoryNameMn, &i.CategoryMnID)
	return i, err
}
